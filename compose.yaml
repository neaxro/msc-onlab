services:
  # Gateway
  kong:
    image: kong:2.8.5
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /usr/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    configs:
      - source: kong_config
        target: /usr/kong/declarative/kong.yml
    ports:
      - 8000:8000
      - 8443:8443

  # Databases
  mysql:
    build:
      context: db/
      dockerfile: Dockerfile
    ports:
      - 3306:3306
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: msc_onlab
      MYSQL_USER: dev
      MYSQL_PASSWORD: pass
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 60s
      retries: 5

  postgresql:
    image: postgres:latest
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 5s
      timeout: 60s
      retries: 5

  # Identity Provider
  keycloak:
    image: docker.io/bitnami/keycloak:26.0.5
    ports:
      - 8080:8080
    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: pass
      KEYCLOAK_CREATE_ADMIN_USER: true
      KEYCLOAK_DATABASE_USER: admin
      KEYCLOAK_DATABASE_PASSWORD: pass
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_EXTRA_ARGS: "--import-realm"
    configs:
      - source: keycloak_test_realm
        target: /opt/bitnami/keycloak/data/import/keycloak.default.realm.json
    depends_on:
      postgresql:
        condition: service_healthy

  # Backend
  auth:
    build:
      context: ./api_v2/auth
      dockerfile: Dockerfile
    restart: always
    environment:
      APP_HOST: "0.0.0.0"
      APP_PORT: 5000
      APP_DEBUG: True
      KEYCLOAK_SERVER_URL: http://keycloak:8080 # Kong OpenID Connect plugin is Enterprise plugin...
      KEYCLOAK_REALM_NAME: msc-onlab-test
      KEYCLOAK_CLIENT_ID: msc-onlab-auth-microservice-client-test
      KEYCLOAK_CLIENT_SECRET: moo8oexa0Aitoon8chohCaeh8eith5ei
      KEYCLOAK_ADMIN_USERNAME: realmadmin
      KEYCLOAK_ADMIN_PASSWORD: Asdasd11
      METRICS_PREFIX: msc_onlab
      METRICS_APP_NAME: auth
    ports:
      - 5000:5000
    healthcheck:
      test: ["CMD", "curl", "http://kong:8000/auth/health"]
      interval: 5s
      timeout: 60s
      retries: 5

  # Monitoring
  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=1h'  # Keep data for only 1 hour
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9090/-/ready"]
      interval: 5s
      timeout: 60s
      retries: 5
    depends_on:
      auth:
        condition: service_healthy

  grafana:
    image: grafana/grafana:11.3.1
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=pass
    configs:
      - source: grafana_datasources_config
        target: /etc/grafana/provisioning/datasources/datasource.yaml
      - source: grafana_dashboard_provisioner
        target: /etc/grafana/provisioning/dashboards/main.yaml
      - source: grafana_backend_dashboard
        target: /var/lib/grafana/dashboards/backend.json
    ports:
      - 3000:3000
    depends_on:
      prometheus:
        condition: service_healthy

configs:
  kong_config:
    file: ./api_v2/kong/kong.yml
  keycloak_test_realm:
    file: ./keycloak/realm.json
  prometheus_config:
    file: ./monitoring/prometheus.yml
  grafana_datasources_config:
    file: ./monitoring/grafana_datasources.yml
  grafana_dashboard_provisioner:
    file: ./monitoring/grafana_dashboard_provisioner.yml
  grafana_backend_dashboard:
    file: ./monitoring/grafana_dashboard.json
